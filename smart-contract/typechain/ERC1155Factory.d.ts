/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ERC1155FactoryInterface extends ethers.utils.Interface {
  functions: {
    "create(string,string,uint256[],string[])": FunctionFragment;
    "getCountERC1155byIndex(uint256,uint256)": FunctionFragment;
    "getCountERC1155byName(uint256,string)": FunctionFragment;
    "getERC1155byIndexAndId(uint256,uint256)": FunctionFragment;
    "getIdByName(uint256,string)": FunctionFragment;
    "getNameById(uint256,uint256)": FunctionFragment;
    "indexToContract(uint256)": FunctionFragment;
    "indexToOwner(uint256)": FunctionFragment;
    "mintERC1155(uint256,string,uint256)": FunctionFragment;
    "tokens(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "create",
    values: [string, string, BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getCountERC1155byIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCountERC1155byName",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getERC1155byIndexAndId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIdByName",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNameById",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "indexToContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "indexToOwner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintERC1155",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCountERC1155byIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCountERC1155byName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getERC1155byIndexAndId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNameById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexToContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "indexToOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;

  events: {
    "Created(address,address)": EventFragment;
    "Minted(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Created"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Minted"): EventFragment;
}

export class ERC1155Factory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ERC1155FactoryInterface;

  functions: {
    create(
      _contractName: string,
      _uri: string,
      _ids: BigNumberish[],
      _names: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCountERC1155byIndex(
      _index: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getCountERC1155byName(
      _index: BigNumberish,
      _name: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getERC1155byIndexAndId(
      _index: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        _contract: string;
        _owner: string;
        _uri: string;
        supply: BigNumber;
      }
    >;

    getIdByName(
      _index: BigNumberish,
      _name: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNameById(
      _index: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    indexToContract(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    indexToOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    mintERC1155(
      _index: BigNumberish,
      _name: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  create(
    _contractName: string,
    _uri: string,
    _ids: BigNumberish[],
    _names: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCountERC1155byIndex(
    _index: BigNumberish,
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCountERC1155byName(
    _index: BigNumberish,
    _name: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getERC1155byIndexAndId(
    _index: BigNumberish,
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber] & {
      _contract: string;
      _owner: string;
      _uri: string;
      supply: BigNumber;
    }
  >;

  getIdByName(
    _index: BigNumberish,
    _name: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNameById(
    _index: BigNumberish,
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  indexToContract(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  indexToOwner(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  mintERC1155(
    _index: BigNumberish,
    _name: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    create(
      _contractName: string,
      _uri: string,
      _ids: BigNumberish[],
      _names: string[],
      overrides?: CallOverrides
    ): Promise<string>;

    getCountERC1155byIndex(
      _index: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCountERC1155byName(
      _index: BigNumberish,
      _name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getERC1155byIndexAndId(
      _index: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        _contract: string;
        _owner: string;
        _uri: string;
        supply: BigNumber;
      }
    >;

    getIdByName(
      _index: BigNumberish,
      _name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNameById(
      _index: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    indexToContract(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    indexToOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    mintERC1155(
      _index: BigNumberish,
      _name: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Created(
      owner?: null,
      tokenContract?: null
    ): TypedEventFilter<
      [string, string],
      { owner: string; tokenContract: string }
    >;

    Minted(
      owner?: null,
      tokenContract?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; tokenContract: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    create(
      _contractName: string,
      _uri: string,
      _ids: BigNumberish[],
      _names: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCountERC1155byIndex(
      _index: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCountERC1155byName(
      _index: BigNumberish,
      _name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getERC1155byIndexAndId(
      _index: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIdByName(
      _index: BigNumberish,
      _name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNameById(
      _index: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    indexToContract(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    indexToOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintERC1155(
      _index: BigNumberish,
      _name: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    create(
      _contractName: string,
      _uri: string,
      _ids: BigNumberish[],
      _names: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCountERC1155byIndex(
      _index: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCountERC1155byName(
      _index: BigNumberish,
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getERC1155byIndexAndId(
      _index: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIdByName(
      _index: BigNumberish,
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNameById(
      _index: BigNumberish,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    indexToContract(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    indexToOwner(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintERC1155(
      _index: BigNumberish,
      _name: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
