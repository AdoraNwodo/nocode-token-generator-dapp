/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CustomTokenInterface extends ethers.utils.Interface {
  functions: {
    "create(tuple)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "returnTokens()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "create",
    values: [
      {
        name: string;
        symbol: string;
        tokenType: string;
        initialSupply: BigNumberish;
        decimals: BigNumberish;
        isBurnable: boolean;
        isMintable: boolean;
        doesHolderRedistribution: boolean;
        hasFeesOrTaxes: boolean;
        holdersRewardFee: BigNumberish;
        burnFeePercentage: BigNumberish;
        transactionTaxPercentage: BigNumberish;
        taxReceivingAddress: string;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "returnTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Created(string,string,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Returned(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Created"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Returned"): EventFragment;
}

export class CustomToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CustomTokenInterface;

  functions: {
    create(
      _token: {
        name: string;
        symbol: string;
        tokenType: string;
        initialSupply: BigNumberish;
        decimals: BigNumberish;
        isBurnable: boolean;
        isMintable: boolean;
        doesHolderRedistribution: boolean;
        hasFeesOrTaxes: boolean;
        holdersRewardFee: BigNumberish;
        burnFeePercentage: BigNumberish;
        transactionTaxPercentage: BigNumberish;
        taxReceivingAddress: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    returnTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  create(
    _token: {
      name: string;
      symbol: string;
      tokenType: string;
      initialSupply: BigNumberish;
      decimals: BigNumberish;
      isBurnable: boolean;
      isMintable: boolean;
      doesHolderRedistribution: boolean;
      hasFeesOrTaxes: boolean;
      holdersRewardFee: BigNumberish;
      burnFeePercentage: BigNumberish;
      transactionTaxPercentage: BigNumberish;
      taxReceivingAddress: string;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  returnTokens(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    create(
      _token: {
        name: string;
        symbol: string;
        tokenType: string;
        initialSupply: BigNumberish;
        decimals: BigNumberish;
        isBurnable: boolean;
        isMintable: boolean;
        doesHolderRedistribution: boolean;
        hasFeesOrTaxes: boolean;
        holdersRewardFee: BigNumberish;
        burnFeePercentage: BigNumberish;
        transactionTaxPercentage: BigNumberish;
        taxReceivingAddress: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    returnTokens(
      overrides?: CallOverrides
    ): Promise<
      ([
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
        boolean,
        number,
        number,
        number,
        string
      ] & {
        name: string;
        symbol: string;
        tokenType: string;
        initialSupply: BigNumber;
        decimals: BigNumber;
        isBurnable: boolean;
        isMintable: boolean;
        doesHolderRedistribution: boolean;
        hasFeesOrTaxes: boolean;
        holdersRewardFee: number;
        burnFeePercentage: number;
        transactionTaxPercentage: number;
        taxReceivingAddress: string;
      })[]
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Created(
      _name?: null,
      _symbol?: null,
      _tokenType?: null
    ): TypedEventFilter<
      [string, string, string],
      { _name: string; _symbol: string; _tokenType: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Returned(owner?: null): TypedEventFilter<[string], { owner: string }>;
  };

  estimateGas: {
    create(
      _token: {
        name: string;
        symbol: string;
        tokenType: string;
        initialSupply: BigNumberish;
        decimals: BigNumberish;
        isBurnable: boolean;
        isMintable: boolean;
        doesHolderRedistribution: boolean;
        hasFeesOrTaxes: boolean;
        holdersRewardFee: BigNumberish;
        burnFeePercentage: BigNumberish;
        transactionTaxPercentage: BigNumberish;
        taxReceivingAddress: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    returnTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    create(
      _token: {
        name: string;
        symbol: string;
        tokenType: string;
        initialSupply: BigNumberish;
        decimals: BigNumberish;
        isBurnable: boolean;
        isMintable: boolean;
        doesHolderRedistribution: boolean;
        hasFeesOrTaxes: boolean;
        holdersRewardFee: BigNumberish;
        burnFeePercentage: BigNumberish;
        transactionTaxPercentage: BigNumberish;
        taxReceivingAddress: string;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    returnTokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
